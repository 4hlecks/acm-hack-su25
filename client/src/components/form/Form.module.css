/* Form.module.css — overlay method for date/time; replace arrow for select */

/* ===== Wrapper & Layout ===== */
.field {
    display: grid;
    gap: 0.5rem; /* gap between label and field */
}

.field[data-layout="row"] {
    grid-template-columns: max-content 1fr;
    align-items: center;
    column-gap: 0.5rem;
}

.hasError {}

/* Label */
.label {
    font-size: var(--font-size-form-label);
    font-weight: 600;
}
.req { margin-left: 0.125rem; }

.help {}
.error {}

/* Control area */
.controlBox {
    position: relative;
    width: var(--field-w, auto); /* override per-field via prop */
}

/* When an end icon is present, add right padding so text doesn't overlap it */
.controlBox[data-has-icon="true"] .input,
.controlBox[data-has-icon="true"] .select {
    padding-right: calc(1rem + var(--icon-size-medium) + 0.25rem);
}

/* Inputs & selects */
.input,
.select {
    width: 100%;
    height: 2.5rem;
    font-size: var(--font-size-form-field);
    padding: 0 1rem;
    background: var(--primary-color);
    border: 1px solid var(--tertiary-color);
    border-radius: var(--border-radius);
    box-sizing: border-box;
    color: var(--text-muted-color);
}

/* Remove native arrow */
.select {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}

/* Hide native picker icon */
.input[type="date"]::-webkit-calendar-picker-indicator,
.input[type="time"]::-webkit-calendar-picker-indicator {
    opacity: 0; /* invisible but clickable; your icon sits on top */
}

/* Optional cleanups for time pseudo-buttons */
.input[type="time"]::-webkit-clear-button,
.input[type="time"]::-webkit-inner-spin-button,
.input[type="time"]::-webkit-outer-spin-button {
    display: none;
}

/* Icon on far right */
.icon,
.iconBtn {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: var(--icon-size-medium);
    height: var(--icon-size-medium);
    line-height: 0;
    color: black;
}

/* Non-interactive icon (e.g., select) should not intercept clicks */
.icon { pointer-events: none; }

/* Interactive icon for date/time to open picker */
.iconBtn { pointer-events: auto; cursor: pointer; }

.icon > svg,
.iconBtn > svg {
    width: 100%;
    height: 100%;
    display: block;
    stroke: currentColor;
}

/* Focus States */
.input:focus,
.input:focus-visible,
.select:focus,
.select:focus-visible {
    outline: none;
    border-color: var(--input-focus-border, #000000);
    box-shadow: none;
}

/* ✅ Only drop bottom radii when we believe the native select menu is open. */
.controlBox[data-open="true"] .select {
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
}

/* Ensure the input/select/textarea container respects the field width */
.field .controlBox {
    width: var(--field-w, 100%);
}

/* Textarea */
.textarea {
    width: 100%;
    min-height: 6rem;
    padding: var(--input-pad-y, 0.5rem) var(--input-pad-x, 0.75rem);
    border: 1px solid var(--input-border, #D9D9D9);
    border-radius: var(--border-radius, 0.5rem);
    background: var(--input-bg, #fff);
    color: inherit;
    font: inherit;
    line-height: 1.4;
    resize: vertical;
    box-sizing: border-box;
}

.textarea:focus,
.textarea:focus-visible {
    outline: none;
    border-color: var(--input-focus-border, #000000);
    box-shadow: none;
}

/* ===== Combobox ===== */

.combo {
    position: relative;
}

/* Give the combobox input extra right padding when an end icon is present */
.combo[data-has-icon="true"] .input {
  padding-right: calc(1rem + var(--icon-size-medium) + 0.25rem);
}

/* Default: editable combobox behaves like a text input (I-beam) */
.combo[data-editable="true"] .comboBar,
.combo[data-editable="true"] .comboBar .input {
  cursor: text;
}

/* Non-editable: make the whole bar feel clickable like a select */
.combo[data-editable="false"] .comboBar,
.combo[data-editable="false"] .comboBar .input {
  cursor: pointer;
}

/* Options already clickable, but make it explicit */
.comboList [role="option"] {
  cursor: pointer;
}

/* Top bar (looks like an input) */
.comboBar {
    display: flex;
    align-items: center;
    height: var(--input-h, 2.5rem);
    padding-inline: var(--input-pad-x, 1rem);
    background: var(--primary-color);
    border: 1px solid var(--tertiary-color);
    border-radius: var(--border-radius);
    box-sizing: border-box;
    transition: border-color 120ms ease;
    outline: none; /* prevent UA focus ring on container */
}

/* Input inside the bar uses transparent bg/border so the bar's chrome shows */
.comboBar .input {
    flex: 1 1 auto;
    min-width: 0;
    border: 0;
    background: transparent;
    outline: none !important;
    color: var(--text-color, inherit);
    height: 100%;
    padding: 0;
}

/* Focus/open state: change border color, drop bottom radii so list fuses in */
.comboOpen .comboBar {
    border-color: var(--input-focus-border, #000000);
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    box-shadow: none;
}

/* Dropdown panel (results) */
.comboList {
    list-style: none;
    margin: 0;
    padding: 0.25rem 0;
    background: var(--input-bg, #fff);
    border: 1px solid var(--input-focus-border, #000000); /* same stroke as fields */
    border-top: 0; /* fuse to bar */
    border-bottom-left-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
    box-shadow: none;
    box-sizing: border-box;

    position: absolute;
    left: 0;
    right: 0;
    top: calc(var(--input-h, 2.5rem) - 1px); /* overlap seam by 1px */
    z-index: 10;

    /* Animation */
    max-height: 0;
    opacity: 0;
    transform: translateY(-0.25rem);
    overflow: hidden;
    transition:
        max-height 160ms ease,
        opacity 140ms ease,
        transform 160ms ease;

    /* Prevent accidental hits while closed */
    pointer-events: none;

    outline: none;
}

/* Open state */
.comboList[data-open="true"] {
    max-height: 16rem;
    opacity: 1;
    transform: translateY(0);
    overflow: auto;
    pointer-events: auto; /* now clickable */
}

/* Option items */
.comboOption {
    padding: 0.5rem 1rem; /* match field horizontal padding */
    cursor: pointer;
    background: var(--input-bg, #fff);
    border-top: 1px solid var(--tertiary-color, #E5E5E5);
    outline: none;
    box-shadow: none;
}

.comboOption:first-child {
    border-top: 1px solid var(--tertiary-color, #E5E5E5);
}

.comboOption:hover,
.comboOptionActive {
    background: var(--button-primary-hover, #f4f4f2);
}

/* Empty state row */
.comboEmpty {
    color: var(--text-muted-color, #777);
    cursor: default;
}

/* ----- Error styles (field-level) ----- */
.error {
  color: #b91c1c;
}

/* Optional: stronger error chrome */
.hasError .input,
.hasError .select,
.hasError .textarea {
  border-color: #ef4444;
}

/* Make placeholder text red when field is invalid (inputs/textarea) */
.controlBox[data-invalid="true"] .input::placeholder,
.controlBox[data-invalid="true"] .textarea::placeholder {
  color: #b91c1c;
}

/* Make the SELECT's *visible text* red while invalid */
.controlBox[data-invalid="true"] .select {
  color: #b91c1c;
}